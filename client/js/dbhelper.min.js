const dbVersion=1;let dbPromise=null;class DBHelper{static openDB(){return idb.open("restorevs",dbVersion,t=>{t.createObjectStore("restaurants",{keyPath:"id"})})}static get DATASERVICES_URL(){return"http://localhost:1337"}static get DATASERVICE_RESTAURANTS_URL(){return`${DBHelper.DATASERVICES_URL}/restaurants`}static fetchRestaurants(t,e=!0){dbPromise.then(r=>{r.transaction("restaurants").objectStore("restaurants").getAll().then(n=>{t&&t(null,n),e&&fetch(DBHelper.DATASERVICE_RESTAURANTS_URL).then(t=>t.json()).then(e=>{const n=r.transaction("restaurants","readwrite");n.objectStore("restaurants").clear().then(()=>{e.forEach(t=>{n.objectStore("restaurants").put(t)})}),t&&t(null,e)}).catch(e=>{console.log(e),t&&t(null,n)})})}).catch(e=>{t?t(e):console.log(e)})}static fetchRestaurantById(t,e){dbPromise.then(r=>{if(t)try{t=parseInt(t)}catch(e){console.log(e),t=null}r.transaction("restaurants").objectStore("restaurants").get(t).then(r=>{r?e(null,r):e(`Restaurant with id '${t}' could not be found.`,null)}).catch(t=>{e?e(t,null):console.log(t)})})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((r,n)=>{if(r)e(r,null);else{const r=n.filter(e=>e.cuisine_type==t);e(null,r)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((r,n)=>{if(r)e(r,null);else{const r=n.filter(e=>e.neighborhood==t);e(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,r){DBHelper.fetchRestaurants((n,a)=>{if(n)r(n,null);else{let n=a;"all"!=t&&(n=n.filter(e=>e.cuisine_type==t)),"all"!=e&&(n=n.filter(t=>t.neighborhood==e)),r(null,n)}})}static fetchNeighborhoods(t){dbPromise.then(e=>{e.transaction("restaurants").objectStore("restaurants").getAll().then(e=>{const r=e.map((t,r)=>e[r].neighborhood),n=r.filter((t,e)=>r.indexOf(t)==e);t&&t(null,n)}).catch(e=>{t?t(e,null):console.log(e)})})}static fetchCuisines(t){dbPromise.then(e=>{e.transaction("restaurants").objectStore("restaurants").getAll().then(e=>{const r=e.map((t,r)=>e[r].cuisine_type),n=r.filter((t,e)=>r.indexOf(t)==e);t&&t(null,n)}).catch(e=>{t?t(e,null):console.log(e)})})}static urlForRestaurant(t){return`${UrlHelper.ROOT_URL}restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t,e=null){let r=t.photograph;return r?(r.endsWith(".jpg")||(r+=".jpg"),e&&(r=r.replace(/.jpg$/,`${e}.jpg`)),`${UrlHelper.ROOT_URL}img/${r}`):null}static mapMarkerForRestaurant(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:DBHelper.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}}dbPromise=DBHelper.openDB();